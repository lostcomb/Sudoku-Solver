
==================== FINAL INTERFACE ====================
2017-06-25 19:38:51.5011887 UTC

interface main@main:Solver 8002
  interface hash: cd333d2c2cf117c64687461ae773167e
  ABI hash: 25d94f967533b6c4a2666d0f63fbb688
  export-list hash: b9d5f2e927f48875b033dabeace49a79
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9d5d0e5951e43ac5c54d51d3e1285ccf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Solver.minimumLength
  Solver.nextLevel
  Solver.nextStepBF
  Solver.nextStepDF
  Solver.solution
  Solver.solve
module dependencies: Sudoku Sudoku.Board Sudoku.Entry
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 loop-0.3.0@loop-0.3.0-4tGn4RSY02pFTwJ5L4CYRr
                      matrix-0.3.5.0@matrix-0.3.5.0-eFZR6K8Lax4OrNeuTQF4y
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  Sudoku 0a9c68946acf0b864abcd719c991e866
  exports: 6e9a59b38364cbc79ae4d983ad91f06e
  complete 0e790962fa4ee71ed8bc5384198d4f6f
  emptyEntries 37d57844eb0978150569dc8aec303dec
  validEntries b0423c00d8dd6a1bf3e046ba33b7eb8f
import  -/  Sudoku.Board 4ebd9ce72fba7d1200cd249e35d9a5c5
  Board 43bd58eab58ea2c9a991cc5975f42ee2
  updateEntry 70d94e065a513fb0002bcab816a8fe01
fc34009f402ef05eda146bbf36a21bc2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Solver.$trModule2
                   Solver.$trModule1) -}
7ef4fd75cf014e6e02299ae9ac4bbe99
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Solver"#) -}
887e34e6b22165b38689c5715091335f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
f2c94ac7a856b2e8525218453f3c301c
  $wnextLevel ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Matrix.Matrix Sudoku.Entry.Entry
    -> [Sudoku.Board.Constraint]
    -> [[Sudoku.Board.Board]]
  {- Arity: 4,
     Strictness: <L,U(U)><S,U><L,U(U,U,U,U,U,U(U,U,U))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: Data.Matrix.Matrix Sudoku.Entry.Entry)
                   (ww3 :: [Sudoku.Board.Constraint]) ->
                 let {
                   ww4 :: GHC.Types.Int = GHC.Types.I# ww1
                 } in
                 let {
                   ww5 :: Sudoku.Board.Board = Sudoku.Board.Board ww ww4 ww2 ww3
                 } in
                 GHC.Base.map
                   @ (GHC.Types.Int, GHC.Types.Int)
                   @ [Sudoku.Board.Board]
                   (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) ->
                    case ds of wild { (,) row col ->
                    case row of ww6 { GHC.Types.I# ww7 ->
                    GHC.Base.map
                      @ Sudoku.Entry.Entry
                      @ Sudoku.Board.Board
                      (\ (w3 :: Sudoku.Entry.Entry) ->
                       case Sudoku.Board.$wupdateEntry
                              ww
                              ww4
                              ww2
                              ww3
                              ww6
                              col
                              w3 of ww8 { (#,,,#) ww9 ww10 ww11 ww12 ->
                       Sudoku.Board.Board ww9 ww10 ww11 ww12 })
                      (Sudoku.$wvalidEntries ww5 ww7 col) } })
                   (Sudoku.$wemptyEntries ww1 ww2)) -}
afb3f7eec37a392dc139f74acc597def
  minimumLength :: Data.Foldable.Foldable t => [t a] -> t a
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,C(U(U)),A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ (t :: * -> *)
                   @ a
                   ($dFoldable :: Data.Foldable.Foldable t)
                   (eta :: [t a]) ->
                 letrec {
                   go1 :: [t a] -> t a {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [t a]) ->
                     case ds of wild {
                       [] -> Solver.minimumLength2 @ t @ a
                       : x ds1
                       -> case ds1 of wild1 {
                            [] -> x
                            : ipv ipv1
                            -> case Data.Foldable.length
                                      @ t
                                      $dFoldable
                                      @ a
                                      x of wild2 { GHC.Types.I# x# ->
                               let {
                                 y :: t a = go1 wild1
                               } in
                               case Data.Foldable.length
                                      @ t
                                      $dFoldable
                                      @ a
                                      y of wild3 { GHC.Types.I# y# ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x# y#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x# y#) of wild5 {
                                      GHC.Types.False -> y GHC.Types.True -> x }
                                 GHC.Types.True -> x } } } } }
                 } in
                 go1 eta) -}
9b8f2c4bbf90416050f055f0e699a349
  minimumLength2 :: t a
  {- Strictness: x -}
2703ce8362d0a3e0b9e90b005c8d920b
  nextLevel :: Sudoku.Board.Board -> [[Sudoku.Board.Board]]
  {- Arity: 1,
     Strictness: <S(LS(S)LL),1*U(U(U),U(U),U(U,U,U,U,U,U(U,U,U)),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Sudoku.Board.Board) ->
                 case w of ww { Sudoku.Board.Board ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 Solver.$wnextLevel ww1 ww6 ww3 ww4 } }) -}
a7309027a27dd6432e21bf28a1083b92
  nextStepBF :: [Sudoku.Board.Board] -> [Sudoku.Board.Board]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Sudoku.Board.Board]) ->
                 case ds of wild {
                   [] -> Solver.nextStepBF1
                   : x xs
                   -> GHC.Base.++
                        @ Sudoku.Board.Board
                        xs
                        (case x of ww { Sudoku.Board.Board ww1 ww2 ww3 ww4 ->
                         case ww2 of ww5 { GHC.Types.I# ww6 ->
                         Solver.nextStepBF_go
                           (Solver.$wnextLevel ww1 ww6 ww3 ww4) } }) }) -}
34c2774c822b4d5fc7463e748315aa81
  nextStepBF1 :: [Sudoku.Board.Board]
  {- Strictness: x -}
693ef40074566652fcd3b6d134002a9b
  nextStepBF_go :: [[Sudoku.Board.Board]] -> [Sudoku.Board.Board]
  {- Arity: 1, Strictness: <S,1*U> -}
f4b445b1e4b4fd5980a11dca4b88bb0b
  nextStepDF :: [Sudoku.Board.Board] -> [Sudoku.Board.Board]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Sudoku.Board.Board]) ->
                 case ds of wild {
                   [] -> Solver.nextStepDF1
                   : x xs
                   -> case x of ww { Sudoku.Board.Board ww1 ww2 ww3 ww4 ->
                      case ww2 of ww5 { GHC.Types.I# ww6 ->
                      GHC.Base.++
                        @ Sudoku.Board.Board
                        (Solver.nextStepDF_go (Solver.$wnextLevel ww1 ww6 ww3 ww4))
                        xs } } }) -}
1839cc27ba17b6e83e3156fe62307c6e
  nextStepDF1 :: [Sudoku.Board.Board]
  {- Strictness: x -}
f2a0858141f61fd68fa276c5553f8570
  nextStepDF_go :: [[Sudoku.Board.Board]] -> [Sudoku.Board.Board]
  {- Arity: 1, Strictness: <S,1*U> -}
bb1b151b362cc4db338998abd2854e0a
  solution ::
    [Sudoku.Board.Board]
    -> GHC.Base.Maybe (Sudoku.Board.Board, [Sudoku.Board.Board])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Sudoku.Board.Board]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ (Sudoku.Board.Board, [Sudoku.Board.Board])
                   : x xs
                   -> case x of wild1 { Sudoku.Board.Board ds1 ds2 ds3 ds4 ->
                      case ds2 of wild2 { GHC.Types.I# x1 ->
                      case ds1 of wild3 { GHC.Types.I# x2 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==#
                                x2
                                (GHC.Prim.*# (GHC.Prim.*# (GHC.Prim.*# x1 x1) x1) x1)) of wild4 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (Sudoku.Board.Board, [Sudoku.Board.Board])
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ (Sudoku.Board.Board, [Sudoku.Board.Board])
                             (wild1, xs) } } } } }) -}
810f45a24836898dc6a848218dc5fdec
  solve ::
    [Sudoku.Board.Board]
    -> GHC.Base.Maybe (Sudoku.Board.Board, [Sudoku.Board.Board])
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

