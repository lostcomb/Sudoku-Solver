
==================== FINAL INTERFACE ====================
2017-06-23 16:50:42.8802569 UTC

interface main@main:Solver 8002
  interface hash: b7f36d698830416221f36fa6c6a98333
  ABI hash: 0640728bacba85336dec9748d497e800
  export-list hash: e00029da8439596fa29a3c8250e4570c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9d5d0e5951e43ac5c54d51d3e1285ccf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Solver.minimumLength
  Solver.nextLevel
  Solver.nextStepBF
  Solver.nextStepDF
  Solver.solution
  Solver.solve
module dependencies: Sudoku
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  Sudoku 3d78cb2e645a63c7a5e7b77025517271
  exports: 810e2a39f259a133cdbcba4a6f2ace99
  Board d66cc08bc62b834f8dc0cbb9b152d89a
  complete b2a8b8753d0329ee032db9d15f6c7d5b
  emptyEntries 928f54122e1b3538b946058ce39972c3
  updateEntry f4884904f05cdd7ca702b88980d71acf
  validEntries 77808d374993719d0d8630a49b5961e2
fc34009f402ef05eda146bbf36a21bc2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Solver.$trModule2
                   Solver.$trModule1) -}
7ef4fd75cf014e6e02299ae9ac4bbe99
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Solver"#) -}
887e34e6b22165b38689c5715091335f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
5f8922d32fb85a0ddb7c0e91b3295662
  $wnextLevel ::
    GHC.Types.Int
    -> [Sudoku.Row] -> [Sudoku.Constraint] -> [[Sudoku.Board]]
  {- Arity: 3, Strictness: <L,U(U)><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: [Sudoku.Row])
                   (ww2 :: [Sudoku.Constraint]) ->
                 let {
                   lvl3 :: Sudoku.Board = Sudoku.Board ww ww1 ww2
                 } in
                 GHC.Base.map
                   @ (GHC.Types.Int, GHC.Types.Int)
                   @ [Sudoku.Board]
                   (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) ->
                    case ds of wild { (,) row col ->
                    case row of ww4 { GHC.Types.I# ww5 ->
                    let {
                      lvl4 :: GHC.Types.Bool
                      = GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# ww5 0#)
                    } in
                    let {
                      lvl5 :: Sudoku.Row = GHC.List.$w!! @ Sudoku.Row ww1 ww5
                    } in
                    GHC.Base.map
                      @ Sudoku.Entry
                      @ Sudoku.Board
                      (\ (w3 :: Sudoku.Entry) ->
                       case GHC.List.$wlenAcc @ [Sudoku.Entry] ww1 0# of ww6 { DEFAULT ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.>=# ww5 ww6) of wild1 {
                         GHC.Types.False
                         -> case col of wild2 { GHC.Types.I# x ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.>=# x ww6) of wild3 {
                              GHC.Types.False
                              -> case lvl4 of wild4 {
                                   GHC.Types.False
                                   -> case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<# x 0#) of wild5 {
                                        GHC.Types.False
                                        -> Sudoku.Board
                                             ww
                                             (Sudoku.$wupdate
                                                @ [Sudoku.Entry]
                                                ww5
                                                (Sudoku.$wupdate @ Sudoku.Entry x w3 lvl5)
                                                ww1)
                                             ww2
                                        GHC.Types.True -> lvl3 }
                                   GHC.Types.True -> lvl3 }
                              GHC.Types.True -> lvl3 } }
                         GHC.Types.True -> lvl3 } })
                      (Sudoku.$wvalidEntries ww ww1 ww2 ww5 col) } })
                   (Sudoku.emptyEntries_coordinates
                      Sudoku.$fEnumEntry2
                      (GHC.Base.map
                         @ [Sudoku.Entry]
                         @ [GHC.Types.Int]
                         Sudoku.emptyEntries1
                         ww1))) -}
afb3f7eec37a392dc139f74acc597def
  minimumLength :: Data.Foldable.Foldable t => [t a] -> t a
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,A,C(U(U)),A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ (t :: * -> *)
                   @ a
                   ($dFoldable :: Data.Foldable.Foldable t)
                   (eta :: [t a]) ->
                 letrec {
                   go1 :: [t a] -> t a {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [t a]) ->
                     case ds of wild {
                       [] -> Solver.minimumLength2 @ t @ a
                       : x ds1
                       -> case ds1 of wild1 {
                            [] -> x
                            : ipv ipv1
                            -> case Data.Foldable.length
                                      @ t
                                      $dFoldable
                                      @ a
                                      x of wild2 { GHC.Types.I# x# ->
                               let {
                                 y :: t a = go1 wild1
                               } in
                               case Data.Foldable.length
                                      @ t
                                      $dFoldable
                                      @ a
                                      y of wild3 { GHC.Types.I# y# ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x# y#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x# y#) of wild5 {
                                      GHC.Types.False -> y GHC.Types.True -> x }
                                 GHC.Types.True -> x } } } } }
                 } in
                 go1 eta) -}
9b8f2c4bbf90416050f055f0e699a349
  minimumLength2 :: t a
  {- Strictness: x -}
834ecc1a54e52ff19c64990ffc44c39d
  nextLevel :: Sudoku.Board -> [[Sudoku.Board]]
  {- Arity: 1, Strictness: <S(LSL),1*U(U(U),U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Sudoku.Board) ->
                 case w of ww { Sudoku.Board ww1 ww2 ww3 ->
                 Solver.$wnextLevel ww1 ww2 ww3 }) -}
a9a0bdc76c5a2bba3a9d3c9bf88c796d
  nextStepBF :: [Sudoku.Board] -> [Sudoku.Board]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Sudoku.Board]) ->
                 case ds of wild {
                   [] -> Solver.nextStepBF1
                   : x xs
                   -> GHC.Base.++
                        @ Sudoku.Board
                        xs
                        (case x of ww { Sudoku.Board ww1 ww2 ww3 ->
                         Solver.nextStepBF_go (Solver.$wnextLevel ww1 ww2 ww3) }) }) -}
06926720697fdeece4d0d34d45bbed59
  nextStepBF1 :: [Sudoku.Board]
  {- Strictness: x -}
f84d48c496ae65f5c8ea5001eed060f9
  nextStepBF_go :: [[Sudoku.Board]] -> [Sudoku.Board]
  {- Arity: 1, Strictness: <S,1*U> -}
0f247e17674ab5c29ea6d790a248eb4b
  nextStepDF :: [Sudoku.Board] -> [Sudoku.Board]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Sudoku.Board]) ->
                 case ds of wild {
                   [] -> Solver.nextStepDF1
                   : x xs
                   -> case x of ww { Sudoku.Board ww1 ww2 ww3 ->
                      GHC.Base.++
                        @ Sudoku.Board
                        (Solver.nextStepDF_go (Solver.$wnextLevel ww1 ww2 ww3))
                        xs } }) -}
c63b11f3f9cc4080a436f5210df30c62
  nextStepDF1 :: [Sudoku.Board]
  {- Strictness: x -}
edebc6b0fedc7f0731f09cc68707f9a6
  nextStepDF_go :: [[Sudoku.Board]] -> [Sudoku.Board]
  {- Arity: 1, Strictness: <S,1*U> -}
c68a570883a0e56830eb2349c7c87487
  solution ::
    [Sudoku.Board] -> GHC.Base.Maybe (Sudoku.Board, [Sudoku.Board])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Sudoku.Board]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ (Sudoku.Board, [Sudoku.Board])
                   : x xs
                   -> case x of ww { Sudoku.Board ww1 ww2 ww3 ->
                      case (Sudoku.complete_go ww2)
                             `cast`
                           (Data.Monoid.N:All[0]) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing @ (Sudoku.Board, [Sudoku.Board])
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ (Sudoku.Board, [Sudoku.Board])
                             (ww, xs) } } }) -}
ae6bcddc365609215529b0efc521c004
  solve ::
    [Sudoku.Board] -> GHC.Base.Maybe (Sudoku.Board, [Sudoku.Board])
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

