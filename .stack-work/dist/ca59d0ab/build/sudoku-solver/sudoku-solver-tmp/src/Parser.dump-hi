
==================== FINAL INTERFACE ====================
2017-06-23 16:57:19.0704703 UTC

interface main@main:Parser 8002
  interface hash: bfb743b4d50f2c376bf581bf4fe58c74
  ABI hash: 7bf9faff85ed357836718916e943a908
  export-list hash: 9d0412e26f7b0e734668ebe1b69bff2d
  orphan hash: 667c739a8929f4877419676bfd240c3d
  flag hash: 9d5d0e5951e43ac5c54d51d3e1285ccf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.boardParser
  Parser.boardParser'
  Parser.constraintParser
  Parser.emptyParser
  Parser.entryParser
  Parser.extractUnexpected
  Parser.fullParser
  Parser.full_boardParser
  Parser.indexParser
  Parser.indicesParser
  Parser.intParser
  Parser.invalidConstraintFormat
  Parser.invalidEntryError
  Parser.invalidFormat
  Parser.invalidSizeError
  Parser.invalidSqrtError
  Parser.lexer
  Parser.loc_entryParser
  Parser.parseBoard
  Parser.partial_boardParser
  Parser.rowParser
  Parser.sumConstraintParser
  Parser.unQuote
  Parser.uniqueConstraintParser
module dependencies: Sudoku
package dependencies: Win32-2.3.1.1@Win32-2.3.1.1
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-CdiTOvx5ZEQ2RerUYIP05k
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-m1TEyTenyr5nJN40TpHVj
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-CdiTOvx5ZEQ2RerUYIP05k:System.Console.ANSI b786a4109b9fb8de05c5adb5035fae20
import  -/  ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-CdiTOvx5ZEQ2RerUYIP05k:System.Console.ANSI.Types 91eb16a9fa2802ce904da36fcb7fc448
import  -/  ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-CdiTOvx5ZEQ2RerUYIP05k:System.Console.ANSI.Windows a0db5b8fe09afb96e0926a48376a40b7
import  -/  base-4.9.1.0:Control.Applicative 2c56a0c43327cbbcb6e7a55bf05443c9
import  -/  base-4.9.1.0:Data.Either 186ef9adf6b47e24f39efe9b2e18e352
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.Functor 682cc832c233b71cec70179490a08631
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Float b620368aab866c2bb9d3a0a459566b84
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  Sudoku 3d78cb2e645a63c7a5e7b77025517271
  exports: 810e2a39f259a133cdbcba4a6f2ace99
  Board a18fc5a337f2e8326f7478ac28469066
  Board d66cc08bc62b834f8dc0cbb9b152d89a
  Constraint 00812975d45cc4583efc04bbf7551402
  Empty 07dbacc103e1de423294c26b91e6c7b9
  Entry e6dfbdc87f3a8305e6f4e073348b0f27
  Full b4a0e51e5843d781ce212df56ec5925c
  Sum 8bf55303572ecf1347df30ddde798bca
  Unique c2a15fb700c6c9043fa7b425fe267cc0
  uniformBoard 2258f5b242bd0e53f596182520e33965
  updateEntry f4884904f05cdd7ca702b88980d71acf
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec b63ffbcfd32da83683c00215f9c65dae
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Combinator 9187c2dacfeafa8e3a07683875a35e9e
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Error 282c1e138452e02ca1f3066486c0ee09
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Language 1759bdccf009066fcd38a1c8f281ecb9
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Pos 4ac5edf6d599f05cc4494ebe2d1517b9
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Prim 213a2444916cd4de2a2bca6ff8229f33
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.String bd59b0e993e05d0e374d8a0cd3914c91
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Token 94dbf7c811437904e56e8e8f00a9fd9d
988ace208c5c6bedeae2424ce2820ed5
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok)
                  (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
d85db929ea2e83696ca66fbf8d922d28
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
829bd5e6491bdc1a71200b26bffe5cbf
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
f0a0f59f5f25fe61cacd5ca0b1e46baa
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parser.$trModule2
                   Parser.$trModule1) -}
3bb112fe95a6a1ba67f7413689a4712f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parser"#) -}
9ac4f0eece8cebd95bd00f913c45b738
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
2d03c4bd35b90dca0499c5ac7f9fb0f0
  $wextractUnexpected ::
    [Text.Parsec.Error.Message] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [Text.Parsec.Error.Message]) ->
                 case GHC.List.filter
                        @ Text.Parsec.Error.Message
                        Parser.extractUnexpected1
                        (Data.OldList.sortBy
                           @ Text.Parsec.Error.Message
                           Text.Parsec.Error.$fEqParseError_$ccompare
                           ww) of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        Text.Parsec.Error.SysUnExpect s
                        -> case s of wild2 {
                             [] -> GHC.Types.[] @ GHC.Types.Char
                             : ds xs
                             -> case ds of wild3 { GHC.Types.C# ds4 ->
                                case ds4 of ds5 {
                                  DEFAULT -> wild2 '"'# -> GHC.List.init @ GHC.Types.Char xs } } }
                        Text.Parsec.Error.UnExpect s
                        -> case s of wild2 {
                             [] -> GHC.Types.[] @ GHC.Types.Char
                             : ds xs
                             -> case ds of wild3 { GHC.Types.C# ds4 ->
                                case ds4 of ds5 {
                                  DEFAULT -> wild2 '"'# -> GHC.List.init @ GHC.Types.Char xs } } }
                        Text.Parsec.Error.Expect s
                        -> case s of wild2 {
                             [] -> GHC.Types.[] @ GHC.Types.Char
                             : ds xs
                             -> case ds of wild3 { GHC.Types.C# ds4 ->
                                case ds4 of ds5 {
                                  DEFAULT -> wild2 '"'# -> GHC.List.init @ GHC.Types.Char xs } } }
                        Text.Parsec.Error.Message s
                        -> case s of wild2 {
                             [] -> GHC.Types.[] @ GHC.Types.Char
                             : ds xs
                             -> case ds of wild3 { GHC.Types.C# ds4 ->
                                case ds4 of ds5 {
                                  DEFAULT -> wild2
                                  '"'# -> GHC.List.init @ GHC.Types.Char xs } } } } }) -}
bc27e4ca79d5bfb340b52d0b9b5ac68b
  $wfull_boardParser ::
    [[Sudoku.Entry]]
    -> forall b.
       Text.Parsec.Prim.State GHC.Base.String ()
       -> (Sudoku.Board
           -> Text.Parsec.Prim.State GHC.Base.String ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 4,
     Strictness: <S,1*U><L,U(U,U,U)><L,1*C1(C1(C1(U)))><L,1*C1(U)>,
     Inline: [0] -}
437967414f860c039915b79873d0c25f
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
20ec8856e5e4daf1aeb8e22fe7ffc108
  boardParser ::
    Text.Parsec.String.Parser (GHC.Base.Maybe Sudoku.Board)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.boardParser1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.Maybe Sudoku.Board>_R)) -}
0029f6450ceb44a373c896856eb3c016
  boardParser' ::
    Text.Parsec.String.Parser (GHC.Base.Maybe Sudoku.Board)
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.boardParser'1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Base.Maybe Sudoku.Board>_R)) -}
1f6c03c7f307861622e27f831fc83d33
  boardParser'1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.Maybe Sudoku.Board
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.Maybe Sudoku.Board
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
b076d2a071a16bd7934897a32f9533a8
  boardParser1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe Sudoku.Board
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe Sudoku.Board
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Base.Maybe Sudoku.Board
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Base.Maybe Sudoku.Board
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ (GHC.Base.Maybe Sudoku.Board)
                   Parser.boardParser2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.Maybe Sudoku.Board>_R))
                   (GHC.Types.:
                      @ GHC.Base.String
                      Parser.invalidFormat
                      (GHC.Types.[] @ GHC.Base.String))
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
639097a01c56a19ed5fd3b3a58f6eff9
  boardParser2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Base.Maybe Sudoku.Board
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Base.Maybe Sudoku.Board
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(U)> -}
00b1d2e6062cd50677d3cc7ef5333a6a
  constraintParser :: Text.Parsec.String.Parser Sudoku.Constraint
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.constraintParser1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Sudoku.Constraint>_R)) -}
5317a054a0a8ee8f16696c0e0d25265b
  constraintParser1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Sudoku.Constraint
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Sudoku.Constraint
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: Sudoku.Constraint
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: Sudoku.Constraint
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Sudoku.Constraint
                   Parser.constraintParser2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Sudoku.Constraint>_R))
                   (GHC.Types.:
                      @ GHC.Base.String
                      Parser.invalidConstraintFormat
                      (GHC.Types.[] @ GHC.Base.String))
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
97ee9c11e01a1b0515b79a9a153a9dec
  constraintParser10 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([(GHC.Types.Int, GHC.Types.Int)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([(GHC.Types.Int, GHC.Types.Int)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w3 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w4 :: [(GHC.Types.Int, GHC.Types.Int)]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: [(GHC.Types.Int, GHC.Types.Int)]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w7 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wsepBy1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ (GHC.Types.Int, GHC.Types.Int)
                   @ GHC.Base.String
                   Parser.indexParser
                   Parser.constraintParser11
                   @ b
                   w3
                   w4
                   w5
                   w6
                   w7) -}
4a6d5c4b2540f7746966e0f97d514a12
  constraintParser11 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: (case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds23 }) -}
524ea2446ea01f5d681cf9f662312fb8
  constraintParser12 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta3 :: ([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: ([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Parser.constraintParser13
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   eta2
                   (\ (x :: GHC.Base.String) -> eta3 Sudoku.Unique)
                   eta4
                   (\ (x :: GHC.Base.String) -> eta5 Sudoku.Unique)
                   eta6) -}
a68411e8279421e754ec5caaa0acdfc4
  constraintParser13 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: (case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds14 Parser.constraintParser14 }) -}
49df0da1c8cd5dd973bfbbc2e34b1606
  constraintParser14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-u"#) -}
14cfcf92b3a254e2f427751b23aafe12
  constraintParser2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Sudoku.Constraint
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Sudoku.Constraint
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (cok :: Sudoku.Constraint
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eok :: Sudoku.Constraint
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   eerr1 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b
                     {- Arity: 1, Strictness: <L,U(U(U,U,U),U)> -}
                   = \ (err :: Text.Parsec.Error.ParseError) ->
                     Text.Parsec.Prim.$fAlternativeParsecT2
                       @ [GHC.Types.Char]
                       @ ()
                       @ Data.Functor.Identity.Identity
                       @ [(GHC.Types.Int, GHC.Types.Int)]
                       @ Sudoku.Constraint
                       Parser.constraintParser12
                         `cast`
                       (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                 <[GHC.Types.Char]>_R
                                 <()>_R
                                 <Data.Functor.Identity.Identity>_R
                                 <[(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint>_R))
                       Parser.constraintParser10
                         `cast`
                       (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                 <GHC.Base.String>_R
                                 <()>_R
                                 <Data.Functor.Identity.Identity>_R
                                 <[(GHC.Types.Int, GHC.Types.Int)]>_R))
                       @ b
                       s1
                       cok
                       cerr
                       (\ (y :: Sudoku.Constraint)
                          (s' :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                          (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                        eok y s' (Text.Parsec.Error.mergeError err err'))
                       (\ (err' :: Text.Parsec.Error.ParseError) ->
                        eerr (Text.Parsec.Error.mergeError err err'))
                 } in
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   @ Sudoku.Constraint
                   Parser.constraintParser3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint>_R))
                   Parser.constraintParser10
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Types.Int, GHC.Types.Int)]>_R))
                   @ b
                   s1
                   cok
                   eerr1
                   eok
                   eerr1) -}
9af5147a4c89567a85f614245176dea1
  constraintParser3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta3 :: ([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: ([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ ([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                   Parser.constraintParser5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint>_R))
                   Parser.constraintParser4
                   @ b1
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
38cdb093d5dffd8ff266bb0e9e7d90b7
  constraintParser4 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: (case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds22 }) -}
45889d49f3c2dbe5a688369e6811c884
  constraintParser5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                   (cok :: (GHC.Base.String
                            -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eok :: (GHC.Base.String
                            -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Int
                   @ ([(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                   Parser.constraintParser7
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Int
                              -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint>_R))
                   Parser.constraintParser6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Int>_R))
                   @ b1
                   s1
                   (\ (x :: [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint) ->
                    cok (\ (ds :: GHC.Base.String) -> x))
                   cerr
                   (\ (x :: [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint) ->
                    eok (\ (ds :: GHC.Base.String) -> x))
                   eerr) -}
9f6063c51a4ab67eaf1312e902652035
  constraintParser6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Types.Int
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Types.Int
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: GHC.Types.Int
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: GHC.Types.Int
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds8
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   eta
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    eta1 (GHC.Num.$fNumInt_$cfromInteger x))
                   eta2
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    eta3 (GHC.Num.$fNumInt_$cfromInteger x))
                   eta4 }) -}
170ae43a84744187900855d7c38948d0
  constraintParser7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Types.Int
         -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Types.Int
         -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta3 :: (GHC.Types.Int
                             -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: (GHC.Types.Int
                             -> [(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint)
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Parser.constraintParser8
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   eta2
                   (\ (x :: GHC.Base.String) -> eta3 Sudoku.Sum)
                   eta4
                   (\ (x :: GHC.Base.String) -> eta5 Sudoku.Sum)
                   eta6) -}
08605bbd755668449be273c4839ffa8d
  constraintParser8 ::
    Text.Parsec.Prim.ParsecT
      GHC.Base.String () Data.Functor.Identity.Identity GHC.Base.String
  {- Unfolding: (case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds14 Parser.constraintParser9 }) -}
4b4313f04e7baee4f06d607f1e0ae821
  constraintParser9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-s"#) -}
82070b409661207b4c90c2aea1e76b2c
  emptyParser :: Text.Parsec.String.Parser Sudoku.Entry
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.emptyParser1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Sudoku.Entry>_R)) -}
ef9ebca3aaf9286e8948b273a2e78e61
  emptyParser1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Sudoku.Entry
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Sudoku.Entry
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta3 :: Sudoku.Entry
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: Sudoku.Entry
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 let {
                   lvl5 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   = eta5 Sudoku.Empty
                 } in
                 let {
                   lvl6 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   = eta3 Sudoku.Empty
                 } in
                 ds25
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Base.String>_R)
                   @ b1
                   eta2
                   (\ (x :: GHC.Base.String) -> lvl6)
                   eta4
                   (\ (x :: GHC.Base.String) -> lvl5)
                   eta6 }) -}
9f8b2e716a33af12d30ec778db2ca589
  entryParser :: Text.Parsec.String.Parser Sudoku.Entry
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.entryParser1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Sudoku.Entry>_R)) -}
743cffb332a9993a869d1ade7f772b1d
  entryParser1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Sudoku.Entry
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Sudoku.Entry
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: Sudoku.Entry
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: Sudoku.Entry
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Sudoku.Entry
                   Parser.entryParser2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Sudoku.Entry>_R))
                   (GHC.Types.:
                      @ GHC.Base.String
                      Parser.invalidEntryError
                      (GHC.Types.[] @ GHC.Base.String))
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
7536fd78090271a23d6037de3c518136
  entryParser2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Sudoku.Entry
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Sudoku.Entry
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(U)>,
     Unfolding: (\ @ b
                   (s1 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (cok :: Sudoku.Entry
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eok :: Sudoku.Entry
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   lvl5 :: Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError -> Data.Functor.Identity.Identity b
                   = cok Sudoku.Empty
                 } in
                 let {
                   lvl6 :: GHC.Base.String
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                     {- Arity: 1 -}
                   = \ (x :: GHC.Base.String) -> lvl5
                 } in
                 Parser.entryParser3
                   @ b
                   s1
                   cok
                   cerr
                   eok
                   (\ (err :: Text.Parsec.Error.ParseError) ->
                    case Parser.lexer
                           @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                    ds25
                      `cast`
                    (Text.Parsec.Prim.N:ParsecT[0]
                         <[GHC.Types.Char]>_R
                         <()>_R
                         <Data.Functor.Identity.Identity>_R
                         <GHC.Base.String>_R)
                      @ b
                      s1
                      lvl6
                      cerr
                      (\ (x :: GHC.Base.String)
                         (s' :: Text.Parsec.Prim.State GHC.Base.String ())
                         (err' :: Text.Parsec.Error.ParseError) ->
                       eok Sudoku.Empty s' (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')) })) -}
93106a886a29d0d0531bff50b884e6c3
  entryParser3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Sudoku.Entry
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Sudoku.Entry
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Sudoku.Entry
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta3 :: Sudoku.Entry
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds8
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   eta
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    eta1 (Sudoku.Full (GHC.Num.$fNumInt_$cfromInteger x)))
                   eta2
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    eta3 (Sudoku.Full (GHC.Num.$fNumInt_$cfromInteger x)))
                   eta4 }) -}
fc42888011fa83384a407c14e404f650
  extractUnexpected ::
    Text.Parsec.Error.ParseError -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.Parsec.Error.ParseError) ->
                 case w of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                 Parser.$wextractUnexpected ww2 }) -}
64c4d3e834332f434387db5161d220d3
  extractUnexpected1 :: Text.Parsec.Error.Message -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (m2 :: Text.Parsec.Error.Message) ->
                 case m2 of wild1 {
                   Text.Parsec.Error.SysUnExpect ds1 -> GHC.Types.True
                   Text.Parsec.Error.UnExpect ds1 -> GHC.Types.False
                   Text.Parsec.Error.Expect ds1 -> GHC.Types.False
                   Text.Parsec.Error.Message ds1 -> GHC.Types.False }) -}
2c540ef19170730374b7ab4d3f6e92ab
  fullParser :: Text.Parsec.String.Parser Sudoku.Entry
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.entryParser3
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Sudoku.Entry>_R)) -}
3e5dd15cb6ea4c0264b217f19210ec17
  full_boardParser :: Text.Parsec.String.Parser Sudoku.Board
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.full_boardParser1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Sudoku.Board>_R)) -}
e659d2b93eb1f6408bcb7af2452e741a
  full_boardParser1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Sudoku.Board
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Sudoku.Board
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Sudoku.Board
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Sudoku.Board
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Combinator.$wsepBy1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ [Sudoku.Entry]
                   @ GHC.Base.String
                   Parser.full_boardParser2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[Sudoku.Entry]>_R))
                   Parser.constraintParser4
                   @ b1
                   s1
                   (\ (x :: [[Sudoku.Entry]])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.$wfull_boardParser
                      x
                      @ b1
                      s2
                      (\ (x1 :: Sudoku.Board)[OneShot]
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: [[Sudoku.Entry]])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.$wfull_boardParser
                      x
                      @ b1
                      s2
                      (\ (x1 :: Sudoku.Board)[OneShot]
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
dd514fcfe44cd8168c41dc6e41f59f3b
  full_boardParser2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([Sudoku.Entry]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([Sudoku.Entry]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w3 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w4 :: [Sudoku.Entry]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: [Sudoku.Entry]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w7 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wsepBy1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ Sudoku.Entry
                   @ GHC.Base.String
                   Parser.entryParser1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Sudoku.Entry>_R))
                   Parser.constraintParser11
                   @ b
                   w3
                   w4
                   w5
                   w6
                   w7) -}
41199939e3744de6d0ecb7f475a42f74
  indexParser ::
    Text.Parsec.String.Parser (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds16
                   @ (GHC.Types.Int, GHC.Types.Int)
                   Parser.indexParser1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(GHC.Types.Int, GHC.Types.Int)>_R)) }) -}
9460c5b4c2f1c44d40c317eabbf1f258
  indexParser1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Int
                   @ (GHC.Types.Int, GHC.Types.Int)
                   Parser.indexParser2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)>_R))
                   Parser.constraintParser6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Int>_R))) -}
36248da5ccaf44b4dbde3d3395b4409f
  indexParser2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta3 :: (GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta5 :: (GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
                   Parser.indexParser3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)>_R))
                   Parser.constraintParser11
                   @ b1
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
754394cd76f10ac75bb7480930f56ca7
  indexParser3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                   (cok :: (GHC.Base.String
                            -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eok :: (GHC.Base.String
                            -> GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds8
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    let {
                      x1 :: GHC.Types.Int
                      = case GHC.Integer.Type.integerToInt x of wild1 { DEFAULT ->
                        GHC.Types.I# wild1 }
                    } in
                    cok
                      (\ (ds :: GHC.Base.String) (eta :: GHC.Types.Int) -> (x1, eta)))
                   cerr
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    let {
                      x1 :: GHC.Types.Int
                      = case GHC.Integer.Type.integerToInt x of wild1 { DEFAULT ->
                        GHC.Types.I# wild1 }
                    } in
                    eok
                      (\ (ds :: GHC.Base.String) (eta :: GHC.Types.Int) -> (x1, eta)))
                   eerr }) -}
c7ced45f98321d96a00f6c8e6e1e9b8d
  indicesParser ::
    Text.Parsec.String.Parser [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.constraintParser10
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[(GHC.Types.Int, GHC.Types.Int)]>_R)) -}
e0d3492d46f141301b5833ce56a1f93b
  intParser :: Text.Parsec.String.Parser GHC.Types.Int
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.constraintParser6
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <GHC.Types.Int>_R)) -}
db5c6430497d42812c7e8f7efeddcdc4
  invalidConstraintFormat :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "either a sum constraint or a uniqueness constraint."#) -}
e9f92149cee76547909d6266e0cdba3e
  invalidEntryError :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "a valid entry. Entries can be empty ('.'), or full ('1','2',...). Full entries must be less than or equal to the size of the board."#) -}
9ac4dcfc754ea65a81e782af5f810882
  invalidFormat :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "either 'exit', a full board description or a partial board description."#) -}
fe722d1612cb957df942a3a625babd96
  invalidSizeError :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "The specified board is not square."#) -}
67ac1b98c6591879ff06c1b2f6cdf37c
  invalidSqrtError :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "The size of the specified board does not have an integer square root."#) -}
c1c6ec5ea6d61a5dbb2e38244afbdbe0
  lexer ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String u Data.Functor.Identity.Identity
  {- Unfolding: (\ @ u ->
                 Text.Parsec.Token.makeTokenParser
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ u
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   (Parser.lexer1 @ u)) -}
9899415c6b06cb240b2634e57976ac67
  lexer1 ::
    Text.Parsec.Token.GenLanguageDef
      GHC.Base.String u Data.Functor.Identity.Identity
  {- Unfolding: (\ @ u ->
                 Text.Parsec.Token.LanguageDef
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.True
                   (Text.Parsec.Language.emptyDef7 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.emptyDef4 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.emptyDef1 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.emptyDef1 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Parser.lexer2
                   (GHC.Types.[] @ GHC.Base.String)
                   GHC.Types.True) -}
39bdd80104497de5a242a3896200251f
  lexer2 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Parser.lexer3
                   (GHC.Types.[] @ GHC.Base.String)) -}
b7c8e1574f6cacb940a79d20240457ba
  lexer3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "exit"#) -}
1a52b2b4119550d42df542ff9864ea0a
  loc_entryParser ::
    Text.Parsec.String.Parser
      (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)
  {- Unfolding: (case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ->
                 ds16
                   @ (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)
                   Parser.loc_entryParser1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)>_R)) }) -}
0196c7acc2c96d6856eb47dcb5b2adb1
  loc_entryParser1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Sudoku.Entry
                   @ (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)
                   Parser.loc_entryParser2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)>_R))
                   Parser.entryParser1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Sudoku.Entry>_R))) -}
8d129913eb76b13c8df532726c985b75
  loc_entryParser2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta3 :: (Sudoku.Entry
                             -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta5 :: (Sudoku.Entry
                             -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                   Parser.loc_entryParser3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> Sudoku.Entry
                              -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)>_R))
                   Parser.constraintParser11
                   @ b1
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
2338f4ac85de5d476825228a599f8c14
  loc_entryParser3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                   (cok :: (GHC.Base.String
                            -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eok :: (GHC.Base.String
                            -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Int
                   @ (Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                   Parser.loc_entryParser4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Int
                              -> Sudoku.Entry
                              -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)>_R))
                   Parser.constraintParser6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Int>_R))
                   @ b1
                   s1
                   (\ (x :: Sudoku.Entry
                            -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)) ->
                    cok (\ (ds :: GHC.Base.String) -> x))
                   cerr
                   (\ (x :: Sudoku.Entry
                            -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)) ->
                    eok (\ (ds :: GHC.Base.String) -> x))
                   eerr) -}
1ed39b5c4d2bf023c4737efc8f0b0684
  loc_entryParser4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Types.Int
         -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Types.Int
         -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta3 :: (GHC.Types.Int
                             -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta5 :: (GHC.Types.Int
                             -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Base.String
                   @ (GHC.Types.Int
                      -> Sudoku.Entry -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                   Parser.loc_entryParser5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.String
                              -> GHC.Types.Int
                              -> Sudoku.Entry
                              -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry)>_R))
                   Parser.constraintParser11
                   @ b1
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
abbb12744fc699a6cad496f6323b70dd
  loc_entryParser5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String
         -> GHC.Types.Int
         -> Sudoku.Entry
         -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String
         -> GHC.Types.Int
         -> Sudoku.Entry
         -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                   (cok :: (GHC.Base.String
                            -> GHC.Types.Int
                            -> Sudoku.Entry
                            -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eok :: (GHC.Base.String
                            -> GHC.Types.Int
                            -> Sudoku.Entry
                            -> (GHC.Types.Int, GHC.Types.Int, Sudoku.Entry))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds8
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    let {
                      x1 :: GHC.Types.Int
                      = case GHC.Integer.Type.integerToInt x of wild1 { DEFAULT ->
                        GHC.Types.I# wild1 }
                    } in
                    cok
                      (\ (ds :: GHC.Base.String)
                         (eta :: GHC.Types.Int)
                         (eta1 :: Sudoku.Entry) ->
                       (x1, eta, eta1)))
                   cerr
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    let {
                      x1 :: GHC.Types.Int
                      = case GHC.Integer.Type.integerToInt x of wild1 { DEFAULT ->
                        GHC.Types.I# wild1 }
                    } in
                    eok
                      (\ (ds :: GHC.Base.String)
                         (eta :: GHC.Types.Int)
                         (eta1 :: Sudoku.Entry) ->
                       (x1, eta, eta1)))
                   eerr }) -}
36f3bebbc08a29ce416973017d9eb433
  parseBoard ::
    GHC.Base.String
    -> Data.Either.Either
         [GHC.Types.IO ()] (GHC.Base.Maybe Sudoku.Board)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (str :: GHC.Base.String) ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ (GHC.Base.Maybe Sudoku.Board)
                         (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                         Parser.parseBoard19
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <GHC.Base.Maybe Sudoku.Board>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         str)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError
                              (GHC.Base.Maybe Sudoku.Board)>_R) of wild {
                   Data.Either.Left e
                   -> let {
                        unexpected :: GHC.Base.String
                        = case e of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                          Parser.$wextractUnexpected ww2 }
                      } in
                      let {
                        ds :: ([GHC.Types.Char], [GHC.Types.Char])
                        = case e of wild1 { Text.Parsec.Error.ParseError pos _msgs ->
                          case pos of wild2 { Text.Parsec.Pos.SourcePos _name dt dt1 ->
                          let {
                            x :: GHC.Prim.Int# = GHC.Prim.-# dt1 1#
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# x 0#) of wild3 {
                            GHC.Types.False
                            -> case str of wild4 {
                                 [] -> Parser.parseBoard18
                                 : ipv ipv1
                                 -> case x of ds1 {
                                      DEFAULT
                                      -> let {
                                           ds2 :: ([GHC.Types.Char], [GHC.Types.Char])
                                           = case GHC.List.splitAt_$s$wsplitAt'
                                                    @ GHC.Types.Char
                                                    ipv1
                                                    (GHC.Prim.-# ds1 1#) of ww { (#,#) ww1 ww2 ->
                                             (ww1, ww2) }
                                         } in
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            ipv
                                            (case ds2 of wild5 { (,) xs' xs'' -> xs' }),
                                          case ds2 of wild5 { (,) xs' xs'' -> xs'' })
                                      1#
                                      -> (GHC.Types.:
                                            @ GHC.Types.Char
                                            ipv
                                            (GHC.Types.[] @ GHC.Types.Char),
                                          ipv1) } }
                            GHC.Types.True -> (GHC.Types.[] @ GHC.Types.Char, str) } } }
                      } in
                      Data.Either.Left
                        @ [GHC.Types.IO ()]
                        @ (GHC.Base.Maybe Sudoku.Board)
                        (GHC.Types.:
                           @ (GHC.Types.IO ())
                           (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            GHC.IO.Handle.Text.hPutStr2
                              GHC.IO.Handle.FD.stdout
                              (case ds of wild1 { (,) start end -> start })
                              GHC.Types.False
                              eta)
                             `cast`
                           (Sym (GHC.Types.N:IO[0] <()>_R))
                           (GHC.Types.:
                              @ (GHC.Types.IO ())
                              Parser.parseBoard12 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))
                              (GHC.Types.:
                                 @ (GHC.Types.IO ())
                                 Parser.parseBoard6 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))
                                 (GHC.Types.:
                                    @ (GHC.Types.IO ())
                                    (System.IO.putStr1 unexpected)
                                      `cast`
                                    (Sym (GHC.Types.N:IO[0] <()>_R))
                                    (GHC.Types.:
                                       @ (GHC.Types.IO ())
                                       Parser.parseBoard1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))
                                       (GHC.Types.:
                                          @ (GHC.Types.IO ())
                                          (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                           GHC.IO.Handle.Text.hPutStr2
                                             GHC.IO.Handle.FD.stdout
                                             (case GHC.List.$wlenAcc
                                                     @ GHC.Types.Char
                                                     unexpected
                                                     0# of ww2 { DEFAULT ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.<=# ww2 0#) of wild1 {
                                                GHC.Types.False
                                                -> case ds of wild2 { (,) start end ->
                                                   Parser.$wunsafeDrop @ GHC.Types.Char ww2 end }
                                                GHC.Types.True
                                                -> case ds of wild2 { (,) start end -> end } } })
                                             GHC.Types.True
                                             eta)
                                            `cast`
                                          (Sym (GHC.Types.N:IO[0] <()>_R))
                                          (GHC.Types.:
                                             @ (GHC.Types.IO ())
                                             (\ (eta :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld)[OneShot] ->
                                              GHC.IO.Handle.Text.hPutStr2
                                                GHC.IO.Handle.FD.stdout
                                                (Text.Parsec.Error.$fShowParseError_$cshow e)
                                                GHC.Types.True
                                                eta)
                                               `cast`
                                             (Sym (GHC.Types.N:IO[0] <()>_R))
                                             (GHC.Types.[] @ (GHC.Types.IO ())))))))))
                   Data.Either.Right r
                   -> Data.Either.Right
                        @ [GHC.Types.IO ()]
                        @ (GHC.Base.Maybe Sudoku.Board)
                        r }) -}
36f9e6430503c4b670ec6ec662128002
  parseBoard1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case System.Console.ANSI.Windows.Detect.isANSIEnabled of wild {
                   GHC.Types.False
                   -> System.Console.ANSI.Windows.Emulator.hSetSGR1
                        GHC.IO.Handle.FD.stdout
                        Parser.parseBoard5
                        eta
                   GHC.Types.True
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Parser.parseBoard2
                        GHC.Types.False
                        eta }) -}
48f2dd9935529c8f8e24a7c5da169550
  parseBoard10 :: System.Console.ANSI.Types.SGR
  {- HasNoCafRefs, Strictness: m8,
     Unfolding: (System.Console.ANSI.Types.SetColor
                   System.Console.ANSI.Types.Background
                   System.Console.ANSI.Types.Vivid
                   System.Console.ANSI.Types.Red) -}
1c11a17ffd9d2d4b567f6ffe7fdbba66
  parseBoard11 :: [System.Console.ANSI.Types.SGR]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Types.SGR
                   Parser.parseBoard10
                   (GHC.Types.[] @ System.Console.ANSI.Types.SGR)) -}
df5d0b52f65b03760f63eeccc7c8d62b
  parseBoard12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case System.Console.ANSI.Windows.Detect.isANSIEnabled of wild {
                   GHC.Types.False
                   -> System.Console.ANSI.Windows.Emulator.hSetSGR1
                        GHC.IO.Handle.FD.stdout
                        Parser.parseBoard17
                        eta
                   GHC.Types.True
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Parser.parseBoard13
                        GHC.Types.False
                        eta }) -}
91e2c1bd700c205bcef7f561fe7d8085
  parseBoard13 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Codes.csi
                   Parser.parseBoard14
                   System.Console.ANSI.Codes.setSGRCode1) -}
a19017073afe2a9d824f924ff2c13d5e
  parseBoard14 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Parser.parseBoard15
                   (GHC.Types.[] @ GHC.Types.Int)) -}
8d25a4fc3674b1316f9e42ff0ac19527
  parseBoard15 :: GHC.Types.Int
  {- Unfolding: (case System.Console.ANSI.Codes.$wsgrToCode
                        Parser.parseBoard16 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
49d6f7504a8a578454e18fe52bef0e84
  parseBoard16 :: System.Console.ANSI.Types.SGR
  {- HasNoCafRefs, Strictness: m8,
     Unfolding: (System.Console.ANSI.Types.SetColor
                   System.Console.ANSI.Types.Foreground
                   System.Console.ANSI.Types.Dull
                   System.Console.ANSI.Types.Black) -}
b39e8d5c81a7eac52a0b5fc1a8c54575
  parseBoard17 :: [System.Console.ANSI.Types.SGR]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Types.SGR
                   Parser.parseBoard16
                   (GHC.Types.[] @ System.Console.ANSI.Types.SGR)) -}
ee0a4e57d54087d48f25a4085d690f0a
  parseBoard18 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- HasNoCafRefs,
     Unfolding: ((GHC.Types.[] @ GHC.Types.Char,
                  GHC.Types.[] @ GHC.Types.Char)) -}
057cd023e08a2123bfb87be49da537ee
  parseBoard19 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (GHC.Base.Maybe Sudoku.Board
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (GHC.Base.Maybe Sudoku.Board
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta3 :: GHC.Base.Maybe Sudoku.Board
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta5 :: GHC.Base.Maybe Sudoku.Board
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ (GHC.Base.Maybe Sudoku.Board)
                   Parser.parseBoard21
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <() -> GHC.Base.Maybe Sudoku.Board>_R))
                   Parser.parseBoard20
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
3cd14f0840f5374fa5d5646acf9ae4b9
  parseBoard2 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Codes.csi
                   Parser.parseBoard3
                   System.Console.ANSI.Codes.setSGRCode1) -}
486fefcea05fe54ac1ea3105af774f24
  parseBoard20 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Combinator.eof1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Show.$fShowChar) -}
5a2033487bd5ff28b05b4ad9ae5214c7
  parseBoard21 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((() -> GHC.Base.Maybe Sudoku.Board)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((() -> GHC.Base.Maybe Sudoku.Board)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                   (cok :: (() -> GHC.Base.Maybe Sudoku.Board)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eok :: (() -> GHC.Base.Maybe Sudoku.Board)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ (GHC.Base.Maybe Sudoku.Board)
                   @ (GHC.Base.Maybe Sudoku.Board)
                   Parser.parseBoard22
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.Maybe Sudoku.Board -> GHC.Base.Maybe Sudoku.Board>_R))
                   Parser.boardParser'1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Base.Maybe Sudoku.Board>_R))
                   @ b1
                   s1
                   (\ (x :: GHC.Base.Maybe Sudoku.Board) -> cok (\ (ds :: ()) -> x))
                   cerr
                   (\ (x :: GHC.Base.Maybe Sudoku.Board) -> eok (\ (ds :: ()) -> x))
                   eerr) -}
a4f8e95cdecef32ed25398f47a53f968
  parseBoard22 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.Maybe Sudoku.Board -> GHC.Base.Maybe Sudoku.Board)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.Maybe Sudoku.Board -> GHC.Base.Maybe Sudoku.Board)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (\ @ b1
                   (eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                   (eta3 :: (GHC.Base.Maybe Sudoku.Board
                             -> GHC.Base.Maybe Sudoku.Board)
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta5 :: (GHC.Base.Maybe Sudoku.Board
                             -> GHC.Base.Maybe Sudoku.Board)
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot]
                   (eta6 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)[OneShot] ->
                 case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 let {
                   lvl5 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   = eta5 (GHC.Base.breakpoint @ (GHC.Base.Maybe Sudoku.Board))
                 } in
                 let {
                   lvl6 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   = eta3 (GHC.Base.breakpoint @ (GHC.Base.Maybe Sudoku.Board))
                 } in
                 ds16
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <()>_R)
                   @ b1
                   eta2
                   (\ (x :: ()) -> lvl6)
                   eta4
                   (\ (x :: ()) -> lvl5)
                   eta6 }) -}
683a4941bb3d66c0b4a73ccbcb4916bb
  parseBoard3 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Parser.parseBoard4
                   (GHC.Types.[] @ GHC.Types.Int)) -}
97a84786ded9538902661ad2e8a8ef21
  parseBoard4 :: GHC.Types.Int
  {- Unfolding: (case System.Console.ANSI.Codes.$wsgrToCode
                        System.Console.ANSI.Types.Reset of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
add08578e032facd50665d70c30d7b88
  parseBoard5 :: [System.Console.ANSI.Types.SGR]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Types.SGR
                   System.Console.ANSI.Types.Reset
                   (GHC.Types.[] @ System.Console.ANSI.Types.SGR)) -}
323c3b0775d35b3afcc9ce0a8e87af49
  parseBoard6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case System.Console.ANSI.Windows.Detect.isANSIEnabled of wild {
                   GHC.Types.False
                   -> System.Console.ANSI.Windows.Emulator.hSetSGR1
                        GHC.IO.Handle.FD.stdout
                        Parser.parseBoard11
                        eta
                   GHC.Types.True
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Parser.parseBoard7
                        GHC.Types.False
                        eta }) -}
b3fca0f8524b9c054e671a2b797a959b
  parseBoard7 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Codes.csi
                   Parser.parseBoard8
                   System.Console.ANSI.Codes.setSGRCode1) -}
681f78f1c1ad19dc4bd207365e7b10a8
  parseBoard8 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Parser.parseBoard9
                   (GHC.Types.[] @ GHC.Types.Int)) -}
505433af76befe0c40b7bc93fd59300d
  parseBoard9 :: GHC.Types.Int
  {- Unfolding: (case System.Console.ANSI.Codes.$wsgrToCode
                        Parser.parseBoard10 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
0bd757417db219b4e7c9fa67108ba775
  partial_boardParser :: Text.Parsec.String.Parser Sudoku.Board
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.partial_boardParser1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Sudoku.Board>_R)) -}
11438a95eb8d0991b2696954f6e3ff5d
  partial_boardParser1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Sudoku.Board
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Sudoku.Board
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Sudoku.Board
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Sudoku.Board
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 case Parser.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds8
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    let {
                      x1 :: GHC.Types.Int
                      = case GHC.Integer.Type.integerToInt x of wild1 { DEFAULT ->
                        GHC.Types.I# wild1 }
                    } in
                    \ (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.partial_boardParser2
                      x1
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x2 :: Sudoku.Board)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x2 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Integer.Type.Integer) ->
                    let {
                      x1 :: GHC.Types.Int
                      = case GHC.Integer.Type.integerToInt x of wild1 { DEFAULT ->
                        GHC.Types.I# wild1 }
                    } in
                    \ (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.partial_boardParser2
                      x1
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x2 :: Sudoku.Board)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x2 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr }) -}
906216bbe61cddae49772a1debe17432
  partial_boardParser2 ::
    GHC.Types.Int
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Sudoku.Board
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Sudoku.Board
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U(U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
bddd236883daa0386177a7574ba63e51
  rowParser :: Text.Parsec.String.Parser [Sudoku.Entry]
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.full_boardParser2
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[Sudoku.Entry]>_R)) -}
8fda23ccece3f3a78b37b00b06bb4b52
  sumConstraintParser :: Text.Parsec.String.Parser Sudoku.Constraint
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Parser.sumConstraintParser1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Sudoku.Constraint>_R)) -}
ebc2d11823857746c9cc8a3500b7bf1f
  sumConstraintParser1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Sudoku.Constraint
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Sudoku.Constraint
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   @ Sudoku.Constraint
                   Parser.constraintParser3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint>_R))
                   Parser.constraintParser10
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Types.Int, GHC.Types.Int)]>_R))) -}
cd7c3bced68a2db54df663560297f929
  unQuote :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [GHC.Types.Char]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : ds1 xs
                   -> case ds1 of wild1 { GHC.Types.C# ds2 ->
                      case ds2 of ds3 {
                        DEFAULT -> wild '"'# -> GHC.List.init @ GHC.Types.Char xs } } }) -}
94c51195e617ab335baf2753a38c4a5e
  uniqueConstraintParser ::
    Text.Parsec.String.Parser Sudoku.Constraint
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Parser.uniqueConstraintParser1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Sudoku.Constraint>_R)) -}
807707fd9d95fc94f476d56f44c23eab
  uniqueConstraintParser1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Sudoku.Constraint
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Sudoku.Constraint
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fAlternativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   @ Sudoku.Constraint
                   Parser.constraintParser12
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Types.Int, GHC.Types.Int)] -> Sudoku.Constraint>_R))
                   Parser.constraintParser10
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Types.Int, GHC.Types.Int)]>_R))) -}
"SPEC/Parser $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                          ($dMonad :: GHC.Base.Monad
                                                                        Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = Parser.$s$fStream[]mtok @ tok
"SPEC/Parser $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok
"SPEC/Parser $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                   ($dMonad :: GHC.Base.Monad
                                                                                 Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

