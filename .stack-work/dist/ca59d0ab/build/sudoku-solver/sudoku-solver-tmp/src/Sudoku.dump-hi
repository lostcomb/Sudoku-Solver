
==================== FINAL INTERFACE ====================
2017-06-12 12:52:36.6840776 UTC

interface main@main:Sudoku 8002
  interface hash: a2327dbd7915cc018fadaaac52845ebd
  ABI hash: 279dc7c488d4becf956e087683369730
  export-list hash: 9ad2ff98f45890a46b1505b10fc6a90d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9d5d0e5951e43ac5c54d51d3e1285ccf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Sudoku.chunk
  Sudoku.complete
  Sudoku.getBoxes
  Sudoku.getColumns
  Sudoku.getRows
  Sudoku.isEmpty
  Sudoku.isFull
  Sudoku.update
  Sudoku.updateEntry
  Sudoku.Board{Sudoku.Board}
  Sudoku.Box
  Sudoku.Column
  Sudoku.Entry{Sudoku.Empty Sudoku.Full}
  Sudoku.Row
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
34dfbc3c9f14d1c23e8504f129620edc
  $fEqBoard :: GHC.Classes.Eq Sudoku.Board
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Sudoku.Board Sudoku.$fEqBoard_$c== Sudoku.$fEqBoard_$c/= -}
34dfbc3c9f14d1c23e8504f129620edc
  $fEqBoard_$c/= :: Sudoku.Board -> Sudoku.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Sudoku.Board) (w1 :: Sudoku.Board) ->
                 case w of ww { Sudoku.Board ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Sudoku.Board ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Sudoku.$w$c/= ww4 ww2 ww9 ww7 } } } }) -}
34dfbc3c9f14d1c23e8504f129620edc
  $fEqBoard_$c== :: Sudoku.Board -> Sudoku.Board -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Sudoku.Board) (w1 :: Sudoku.Board) ->
                 case w of ww { Sudoku.Board ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Sudoku.Board ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Sudoku.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
efb05cd8d5e9d35c9efb5af903d1e4e8
  $fEqBoard_$s$fEq[] :: GHC.Classes.Eq [Sudoku.Entry]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Sudoku.Entry]
                  (GHC.Classes.$fEq[]_$c== @ Sudoku.Entry Sudoku.$fEqEntry)
                  Sudoku.$fEqBoard_$s$fEq[]_$c/= -}
ef93177a2c124358e2d28a533cb6ad63
  $fEqBoard_$s$fEq[]_$c/= ::
    [Sudoku.Entry] -> [Sudoku.Entry] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Sudoku.Entry]) (y :: [Sudoku.Entry]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c== @ Sudoku.Entry Sudoku.$fEqEntry x y)) -}
d45dc2175a1280da9d0afb3ab06fea8e
  $fEqEntry :: GHC.Classes.Eq Sudoku.Entry
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Sudoku.Entry Sudoku.$fEqEntry_$c== Sudoku.$fEqEntry_$c/= -}
d45dc2175a1280da9d0afb3ab06fea8e
  $fEqEntry_$c/= :: Sudoku.Entry -> Sudoku.Entry -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Sudoku.Entry) (b :: Sudoku.Entry) ->
                 case a of wild {
                   Sudoku.Full a1
                   -> case b of wild1 {
                        Sudoku.Full b1
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }
                        Sudoku.Empty -> GHC.Types.True }
                   Sudoku.Empty
                   -> case b of wild1 {
                        Sudoku.Full ipv -> GHC.Types.True
                        Sudoku.Empty -> GHC.Types.False } }) -}
d45dc2175a1280da9d0afb3ab06fea8e
  $fEqEntry_$c== :: Sudoku.Entry -> Sudoku.Entry -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Sudoku.Entry) (ds1 :: Sudoku.Entry) ->
                 case ds of wild {
                   Sudoku.Full a1
                   -> case ds1 of wild1 {
                        Sudoku.Full b1 -> GHC.Classes.eqInt a1 b1
                        Sudoku.Empty -> GHC.Types.False }
                   Sudoku.Empty
                   -> case ds1 of wild1 {
                        Sudoku.Full ipv -> GHC.Types.False
                        Sudoku.Empty -> GHC.Types.True } }) -}
34dfbc3c9f14d1c23e8504f129620edc
  $fShowBoard :: GHC.Show.Show Sudoku.Board
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Sudoku.Board
                  Sudoku.$fShowBoard_$cshowsPrec
                  Sudoku.$fShowBoard_$cshow
                  Sudoku.$fShowBoard_$cshowList -}
34dfbc3c9f14d1c23e8504f129620edc
  $fShowBoard1 :: Sudoku.Board -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Sudoku.Board)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of ww { Sudoku.Board ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 GHC.Base.++ @ GHC.Types.Char (Sudoku.$w$cshow ww4 ww2) s } }) -}
34dfbc3c9f14d1c23e8504f129620edc
  $fShowBoard_$cshow :: Sudoku.Board -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S(S)S),1*U(U(U),U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Sudoku.Board) ->
                 case w of ww { Sudoku.Board ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 Sudoku.$w$cshow ww4 ww2 } }) -}
34dfbc3c9f14d1c23e8504f129620edc
  $fShowBoard_$cshowList :: [Sudoku.Board] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Sudoku.Board]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Sudoku.Board Sudoku.$fShowBoard1 ls s) -}
34dfbc3c9f14d1c23e8504f129620edc
  $fShowBoard_$cshowsPrec ::
    GHC.Types.Int -> Sudoku.Board -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S(S(S)S),1*U(U(U),U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Sudoku.Board)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Sudoku.$fShowBoard_$cshow x))
                   s) -}
d45dc2175a1280da9d0afb3ab06fea8e
  $fShowEntry :: GHC.Show.Show Sudoku.Entry
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Sudoku.Entry
                  Sudoku.$fShowEntry_$cshowsPrec
                  Sudoku.$fShowEntry_$cshow
                  Sudoku.$fShowEntry_$cshowList -}
2054a46ce0272329320b817300e6ee3d
  $fShowEntry1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
d45dc2175a1280da9d0afb3ab06fea8e
  $fShowEntry_$cshow :: Sudoku.Entry -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Sudoku.Entry) ->
                 case ds of wild {
                   Sudoku.Full i -> GHC.Show.$fShowInt_$cshow i
                   Sudoku.Empty -> Sudoku.$fShowEntry1 }) -}
d45dc2175a1280da9d0afb3ab06fea8e
  $fShowEntry_$cshowList :: [Sudoku.Entry] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Sudoku.Entry]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Sudoku.Entry
                   (Sudoku.$fShowEntry_$cshowsPrec GHC.Show.shows22)
                   ls
                   s) -}
d45dc2175a1280da9d0afb3ab06fea8e
  $fShowEntry_$cshowsPrec ::
    GHC.Types.Int -> Sudoku.Entry -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Sudoku.Entry)
                   (w2 :: GHC.Base.String) ->
                 Sudoku.$w$cshowsPrec w1 w2) -}
00c6c78aaf50f3f6be2f3591ed4f9a5c
  $tc'Board :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11058090293928064741##
                   7189304590692841116##
                   Sudoku.$trModule
                   Sudoku.$tc'Board1) -}
9e5f7a4e85dc0d6a0f7e6476a90fd162
  $tc'Board1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Board"#) -}
f3d12c6d9c4c8f78ff1230550cc77043
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   499137809173000033##
                   15814555342321493126##
                   Sudoku.$trModule
                   Sudoku.$tc'Empty1) -}
1ec14e3ef8652595cfb0a1f079f8f753
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
4ba8f75232699b286db79f073c6cba84
  $tc'Full :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2987811495256241740##
                   11239287255211931804##
                   Sudoku.$trModule
                   Sudoku.$tc'Full1) -}
0ae6a4e37609e241f0234968d55110b3
  $tc'Full1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Full"#) -}
02087f6b29374e1ee04100c710840b18
  $tcBoard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7597520373053135554##
                   9734022840594599033##
                   Sudoku.$trModule
                   Sudoku.$tcBoard1) -}
07377c61db9494dd4bf610b246c885ee
  $tcBoard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Board"#) -}
6f471a42bb8925f2f51739b8fd705ba0
  $tcEntry :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8170451628451563706##
                   1417671691947218671##
                   Sudoku.$trModule
                   Sudoku.$tcEntry1) -}
f8cf1f3fc311550b7665bc65adaab184
  $tcEntry1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Entry"#) -}
b69296df5b9163e3bf334b591985f766
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Sudoku.$trModule2
                   Sudoku.$trModule1) -}
d0eb5ff3ecc3811acbcaa8ab0151f64d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Sudoku"#) -}
0d63fdde2ea4a6cadcf880950a0262bc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
86b4a3988e6ad0e904ad263dbc0fe052
  $w$c/= ::
    GHC.Prim.Int#
    -> [Sudoku.Row] -> GHC.Prim.Int# -> [Sudoku.Row] -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,1*U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Sudoku.Row])
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: [Sudoku.Row]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ [Sudoku.Entry]
                             Sudoku.$fEqBoard_$s$fEq[]
                             ww1
                             ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
cfa6ff6fb303b38abc985c8d3db7b9e0
  $w$c== ::
    GHC.Prim.Int#
    -> [Sudoku.Row] -> GHC.Prim.Int# -> [Sudoku.Row] -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,1*U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Sudoku.Row])
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: [Sudoku.Row]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ [Sudoku.Entry]
                        Sudoku.$fEqBoard_$s$fEq[]
                        ww1
                        ww3 }) -}
0c83597f438e3a187ea597e0e457c93e
  $w$cshow :: GHC.Prim.Int# -> [Sudoku.Row] -> GHC.Base.String
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
d45dc2175a1280da9d0afb3ab06fea8e
  $w$cshowsPrec ::
    Sudoku.Entry -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Sudoku.Entry) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Sudoku.Full i
                   -> case i of ww2 { GHC.Types.I# ww3 ->
                      case GHC.Show.$wshowSignedInt
                             0#
                             ww3
                             (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                        w1 } }
                   Sudoku.Empty
                   -> GHC.Base.++ @ GHC.Types.Char Sudoku.$fShowEntry1 w1 }) -}
7c4ab3da7c36955dceafd52942ce8840
  $wchunk :: GHC.Prim.Int# -> [a] -> (# [a], [[a]] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0] -}
b27e7f14c121efd2ae219e4ac6135fbe
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
81279e4086a333e28cd2e74efb4c59e7
  $wupdate :: GHC.Prim.Int# -> a -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: a) (w1 :: [a]) ->
                 let {
                   n :: [a]
                   = let {
                       x :: GHC.Prim.Int# = GHC.Prim.+# ww 1#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 0#) of wild {
                       GHC.Types.False -> Sudoku.$wunsafeDrop @ a x w1
                       GHC.Types.True -> w1 }
                 } in
                 let {
                   n1 :: [a] = GHC.Types.: @ a w n
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww) of wild {
                   GHC.Types.False -> n1
                   GHC.Types.True
                   -> letrec {
                        $wgo :: [a] -> GHC.Prim.Int# -> [a]
                          {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                        = \ (w2 :: [a]) (ww1 :: GHC.Prim.Int#) ->
                          case w2 of wild1 {
                            [] -> n1
                            : y ys
                            -> case ww1 of ds1 {
                                 DEFAULT -> GHC.Types.: @ a y ($wgo ys (GHC.Prim.-# ds1 1#))
                                 1# -> GHC.Types.: @ a y n1 } }
                      } in
                      $wgo w1 ww }) -}
34dfbc3c9f14d1c23e8504f129620edc
  data Board = Board GHC.Types.Int [Sudoku.Row]
2744a1166b785e2abcb945c07384fbf5
  type Box = [Sudoku.Entry]
1b435b173b69e6c04e2d50c67a157d3a
  type Column = [Sudoku.Entry]
d45dc2175a1280da9d0afb3ab06fea8e
  data Entry = Full GHC.Types.Int | Empty
cf8929742b4e28c29eed5ad8bc015679
  type Row = [Sudoku.Entry]
1f162feb46ebd50347a5e9d1bf07a6ea
  chunk :: GHC.Types.Int -> [a] -> [[a]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Sudoku.$wchunk @ a ww1 w1 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ [a] ww3 ww4 } }) -}
6672b537ff951ed7cd0181fd2d9b5eaf
  complete :: Sudoku.Board -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Sudoku.Board) ->
                 case w of ww { Sudoku.Board ww1 ww2 -> Sudoku.complete_go ww2 }) -}
9a8cf6d079d2a6d259547148cf88dca8
  complete_go :: [[Sudoku.Entry]] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8bcb35f2dee8b7e522f52c51645981ac
  getBoxes :: Sudoku.Board -> [Sudoku.Box]
  {- Arity: 1, Strictness: <B,1*H>x,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Sudoku.Board) ->
                 case ds of wild { Sudoku.Board ds1 rows -> Sudoku.getBoxes1 }) -}
705e22993f972d37bbd413aedd69023a
  getBoxes1 :: [Sudoku.Box]
  {- Strictness: x -}
3df6d14012a6411acde609161876b9f3
  getColumns :: Sudoku.Board -> [Sudoku.Column]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Sudoku.Board) ->
                 case ds of wild { Sudoku.Board ds1 rows ->
                 Data.OldList.transpose @ Sudoku.Entry rows }) -}
9d45c53ffd09b599f85f49600de4728c
  getRows :: Sudoku.Board -> [Sudoku.Row]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Sudoku.Board) ->
                 case ds of wild { Sudoku.Board ds1 rows -> rows }) -}
b1ff31f8cfb55e06cbd58294833f51fc
  isEmpty :: Sudoku.Entry -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Sudoku.Entry) ->
                 case ds of wild {
                   Sudoku.Full ipv -> GHC.Types.False
                   Sudoku.Empty -> GHC.Types.True }) -}
36111856d8e18c888836d8f15022b056
  isFull :: Sudoku.Entry -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Sudoku.Entry) ->
                 case ds of wild {
                   Sudoku.Full ds1 -> GHC.Types.True
                   Sudoku.Empty -> GHC.Types.False }) -}
96b2b94aff9530213d579843cfe0b6c9
  update :: GHC.Types.Int -> a -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: a) (w2 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Sudoku.$wupdate @ a ww1 w1 w2 }) -}
fa828de326f54a753d1c76a2de7b937f
  updateEntry ::
    Sudoku.Board
    -> GHC.Types.Int -> GHC.Types.Int -> Sudoku.Entry -> Sudoku.Board
  {- Arity: 4, Strictness: <S,1*U(U,U)><L,U(U)><L,1*U(U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Sudoku.Board)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Sudoku.Entry) ->
                 case w of ww { Sudoku.Board ww1 ww2 ->
                 Sudoku.Board
                   ww1
                   (case w1 of ww3 { GHC.Types.I# ww4 ->
                    Sudoku.$wupdate
                      @ [Sudoku.Entry]
                      ww4
                      (case w2 of ww5 { GHC.Types.I# ww6 ->
                       Sudoku.$wupdate
                         @ Sudoku.Entry
                         ww6
                         w3
                         (GHC.List.$w!! @ Sudoku.Row ww2 ww4) })
                      ww2 }) }) -}
instance [safe] GHC.Classes.Eq [Sudoku.Board] = Sudoku.$fEqBoard
instance [safe] GHC.Classes.Eq [Sudoku.Entry] = Sudoku.$fEqEntry
instance [safe] GHC.Show.Show [Sudoku.Board] = Sudoku.$fShowBoard
instance [safe] GHC.Show.Show [Sudoku.Entry] = Sudoku.$fShowEntry
"SPEC/Sudoku $fEq[] @ Entry" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                        Sudoku.Entry)
  GHC.Classes.$fEq[] @ Sudoku.Entry $dEq = Sudoku.$fEqBoard_$s$fEq[]
"SPEC/Sudoku $fEq[]_$c/= @ Entry" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                             Sudoku.Entry)
  GHC.Classes.$fEq[]_$c/= @ Sudoku.Entry $dEq
  = Sudoku.$fEqBoard_$s$fEq[]_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

